name: Reusable Builder Workflows

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      os:
        required: false
        type: string
        default: 'ubuntu-latest'
        description: 'Operation system to be used'
      node-version:
        required: false
        type: string
        description: 'Node version to be used'
        default: '14.x'
    secrets:
      ACCESS_TOKEN:
        required: true

# Reference https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions: write-all

jobs:
  dobuild:
    runs-on: ${{ inputs.os }}
    # set timeout - see https://stackoverflow.com/a/59076067/6404439
    timeout-minutes: 120
    strategy:
      fail-fast: true
      #max-parallel: 3
    env:
      NODE_OPTIONS: '--max_old_space_size=8192' #8192 4096 --expose-gc
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    steps:
      - run: git config --global core.autocrlf false
      - uses: szenius/set-timezone@v1.2
        name: set os timezone
        with:
          timezoneLinux: 'Asia/Jakarta'
          timezoneMacos: 'Asia/Jakarta'
          timezoneWindows: 'Indonesia Standard Time'
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'
          ref: 'monorepo-v7'
      - name: update submodules
        run: |
          echo "init submodules"
          git submodule init
          git submodule foreach "git submodule init"
          echo "sync submodules"
          git submodule sync
          git submodule foreach "git submodule sync"
          echo "update submodules"
          mkdir -p bin >/dev/null 2>&1
          curl -L https://github.com/dimaslanjaka/bin/raw/master/bin/submodule-install > bin/submodule-install
          rm -rf .git/modules
          bash ./bin/submodule-install
          echo "disable githooks warning"
          git config advice.ignoredHook false
        shell: bash
      - name: Use Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - name: Enable corepack
        shell: bash
        run: corepack enable

      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/node_modules/.bin" >> $GITHUB_PATH
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "cache-npm=$(npm config get cache)" >> $GITHUB_OUTPUT
          YARN_CURRENT=$(yarn -v)
          YARN_BERRY=3.2.1
          if [[ "ok" == "$(echo | awk "(${YARN_CURRENT} > ${YARN_BERRY}) { print \"ok\"; }")" ]]; then
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_ENV
            echo "cache-yarn=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
            echo "cache-yarn=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi
          echo "architecture=$(getconf LONG_BIT)" >> $GITHUB_ENV

      - uses: pat-s/always-upload-cache@v3.0.11
        id: cache
        with:
          path: |
            **/.yarn
            ./release*
            ./yarn.lock
            ./packages/**/dist
          key: ${{ runner.os }}-${{ inputs.node-version }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.node-version }}
            ${{ runner.os }}-

      - name: Install Dependencies
        run: |
          touch yarn.lock
          yarn install
          npm run prepare
          yarn workspaces foreach run postinstall
        shell: bash
        #timeout-minutes: 60
      - name: Build
        run: |
          yarn workspace hexo-util run build
          yarn workspace hexo-log run build
          yarn workspace hexo-front-matter run build
          yarn workspace warehouse run build
          npm run build
        shell: bash
        id: build

      - name: Create build-output artifact
        uses: actions/upload-artifact@master
        with:
          name: build-output
          path: |
            **/dist/**
            **/release*/**
            !**/node_modules/**
            !**/tmp/**
